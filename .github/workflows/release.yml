name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            binary: organise
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            binary: organise.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Install UPX (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Install UPX (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install upx -y

      - name: Show binary size before compression
        shell: bash
        run: |
          echo "Binary size before compression:"
          ls -lh target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}

      - name: Compress with UPX (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        continue-on-error: true
        run: upx --best --lzma target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}

      - name: Compress with UPX (Windows)
        if: matrix.platform.os == 'windows-latest'
        continue-on-error: true
        shell: pwsh
        run: upx --best --lzma target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}

      - name: Show binary size after compression
        shell: bash
        run: |
          echo "Binary size after compression:"
          ls -lh target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}

      - name: Strip binary (Linux only)
        if: matrix.platform.os == 'ubuntu-latest'
        run: strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }} || true

      - name: Create archive directory
        run: mkdir -p release-artifacts

      - name: Copy binary to archive (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }} release-artifacts/
          cp README.md release-artifacts/ || true
          cp LICENSE release-artifacts/ || true

      - name: Copy binary to archive (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          Copy-Item "target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}" -Destination "release-artifacts/"
          Copy-Item "README.md" -Destination "release-artifacts/" -ErrorAction SilentlyContinue
          Copy-Item "LICENSE" -Destination "release-artifacts/" -ErrorAction SilentlyContinue

      - name: Create tar.gz archive (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        working-directory: release-artifacts
        run: tar czf ../workbench-preprocessor-${{ matrix.platform.name }}.tar.gz *

      - name: Create zip archive (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: Compress-Archive -Path release-artifacts/* -DestinationPath workbench-preprocessor-${{ matrix.platform.name }}.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: workbench-preprocessor-${{ matrix.platform.name }}
          path: |
            workbench-preprocessor-${{ matrix.platform.name }}.tar.gz
            workbench-preprocessor-${{ matrix.platform.name }}.zip
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Optimized Binaries
            
            These binaries are built with aggressive size optimizations:
            - Link Time Optimization (LTO)
            - Size-optimized compilation (`opt-level = "z"`)
            - Stripped debug symbols
            - UPX compression (60-70% size reduction)
            
            Download the appropriate file for your platform and extract it.
          files: |
            artifacts/workbench-preprocessor-linux-x86_64/*.tar.gz
            artifacts/workbench-preprocessor-windows-x86_64/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
